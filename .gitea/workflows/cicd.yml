name: CI/CD ChronoTrak

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: docker
    container:
      image: docker:latest
      network: "host"
      options: --privileged
    steps:
      - name: Configuration du runner
        run: |
          apk add --no-cache git nodejs npm curl bash

      - name: Checkout du code avec actions/checkout
        uses: actions/checkout@v3
        with:
          repository: ${{ github.repository }}
          ref: ${{ github.sha }}
          fetch-depth: 0  # Pour récupérer l'historique des tags

      # Détecter la version
      - name: Détecter la version
        id: version
        run: |
          # Essayer de récupérer le dernier tag
          VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          
          # Si aucun tag n'est trouvé, essayer à partir de la branche
          if [ -z "$VERSION" ]; then
            BRANCH=$(git branch --show-current)
            if [[ "$BRANCH" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              VERSION="$BRANCH"
            fi
          fi
          
          # Si toujours aucune version, utiliser une version par défaut
          if [ -z "$VERSION" ]; then
            VERSION="v1.0.0-dev"
          fi
          
          # Utilisation directe du tag avec le 'v'
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Version détectée: $VERSION"

      # Authentification au registre
      - name: Login au registre Docker
        run: |
          echo "${{ secrets.REGISTRY_PASSWORD }}" | docker login forge.apacher.eu -u "${{ secrets.REGISTRY_USERNAME }}" --password-stdin

      # Construction et push de l'image
      - name: Build et push de l'image Docker
        run: |
          docker buildx build --provenance=false --push \
            --build-arg VERSION="${{ env.VERSION }}" \
            --tag forge.apacher.eu/aurelien-dazy/chronotrak:latest \
            --tag forge.apacher.eu/aurelien-dazy/chronotrak:${{ env.VERSION }} \
            .

      # Analyse de sécurité avec Trivy
      - name: Installation et exécution de Trivy
        run: |
          apk add --no-cache curl
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
          trivy image forge.apacher.eu/aurelien-dazy/chronotrak:latest --severity HIGH,CRITICAL

  deploy:
    needs: build-and-push
    runs-on: docker
    container:
      image: docker:latest
      network: "host"
      options: --privileged
    steps:
      # Installation des dépendances SSH
      - name: Installation des dépendances SSH
        run: |
          apk add --no-cache openssh-client bash file
          mkdir -p ~/.ssh
          echo "StrictHostKeyChecking=no" > ~/.ssh/config
          chmod 600 ~/.ssh/config

      # Configuration de la clé SSH (ed25519)
      - name: Configuration de la clé SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.PROD_SSH_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519

      # Test de connexion SSH
      - name: Test de connexion SSH
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_ed25519 -p ${{ secrets.PROD_SSH_PORT }} ${{ secrets.PROD_SSH_USERNAME }}@${{ secrets.PROD_SSH_HOST }} "echo 'Connexion SSH réussie'"

      # Déploiement sur le serveur de production
      - name: Déploiement sur le serveur de production
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_ed25519 -p ${{ secrets.PROD_SSH_PORT }} ${{ secrets.PROD_SSH_USERNAME }}@${{ secrets.PROD_SSH_HOST }} "
            set -ex
            echo 'Début du déploiement'
            cd ${{ secrets.PROJECT_DIRECTORY }}
            docker login forge.apacher.eu -u ${{ secrets.REGISTRY_USERNAME }} -p ${{ secrets.REGISTRY_PASSWORD }}
            ENVIRONMENT=production docker compose pull
            ENVIRONMENT=production docker compose up -d
            docker logout forge.apacher.eu
            echo 'Déploiement terminé avec succès'
          "