name: CI/CD ChronoTrak

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: docker
    container:
      image: docker:latest
      options: --privileged
    steps:
      - name: Configuration du runner
        run: |
          apk add --no-cache git curl

      - name: Checkout manuel du code
        run: |
          mkdir -p /tmp/repo
          cd /tmp/repo
          git init
          git remote add origin ${{ github.server_url }}/${{ github.repository }}.git
          git fetch --depth=1 origin ${{ github.ref }}
          git checkout FETCH_HEAD
          cp -r . /workspace/
          cd /workspace/

      - name: Login au registre Docker
        run: |
          echo "${{ secrets.REGISTRY_PASSWORD }}" | docker login forge.apacher.eu -u "${{ secrets.REGISTRY_USERNAME }}" --password-stdin

      - name: Build et push de l'image Docker
        run: |
          docker buildx build --provenance=false --push --tag forge.apacher.eu/aurelien-dazy/chronotrak:latest .

      - name: Installation et exécution de Trivy
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
          trivy image forge.apacher.eu/aurelien-dazy/chronotrak:latest --severity HIGH,CRITICAL

  deploy:
    needs: build-and-push
    runs-on: docker
    container:
      image: docker:latest
    steps:
      - name: Installation dépendances SSH
        run: |
          apk add --no-cache openssh-client bash

      - name: Configuration de la clé SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.PROD_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.PROD_SSH_HOST }} >> ~/.ssh/known_hosts

      - name: Déploiement sur le serveur de production
        run: |
          ssh -p ${{ secrets.PROD_SSH_PORT }} ${{ secrets.PROD_SSH_USERNAME }}@${{ secrets.PROD_SSH_HOST }} "
            # Se positionner dans le répertoire de l'application
            cd ${{ secrets.PROJECT_DIRECTORY }}
            
            # Se connecter au registre Docker
            docker login forge.apacher.eu -u ${{ secrets.REGISTRY_USERNAME }} -p ${{ secrets.REGISTRY_PASSWORD }}
            
            # Récupérer la dernière image et démarrer les conteneurs
            ENVIRONMENT=production docker compose pull
            ENVIRONMENT=production docker compose up -d
            
            # Se déconnecter du registre Docker
            docker logout forge.apacher.eu
          "