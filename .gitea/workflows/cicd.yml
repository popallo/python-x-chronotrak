name: CI/CD ChronoTrak

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build-and-push:
    name: üèóÔ∏è Construction et publication de l'image
    runs-on: docker
    container:
      image: docker:latest
      options: --privileged --network=host
    steps:
      - name: üì¶ Installation des d√©pendances
        run: |
          apk add --no-cache git nodejs npm curl

      - name: üì• Checkout du code
        uses: actions/checkout@v3
        with:
          repository: ${{ github.repository }}
          ref: ${{ github.sha }}

      - name: üîê Login au registre Docker
        run: |
          echo "${{ secrets.REGISTRY_PASSWORD }}" | docker login ${{ FORGE_DOMAIN }} -u "${{ secrets.REGISTRY_USERNAME }}" --password-stdin

      - name: üõ†Ô∏è Build et push de l'image Docker
        run: |
          docker buildx build \
            --provenance=false \
            --cache-from=${{ FORGE_REPOSITORY }} \
            --tag ${{ FORGE_REPOSITORY }} \
            --tag ${{ FORGE_REPOSITORY }}:${{ github.sha }} \
            --push \
            .

      - name: üîç Analyse de s√©curit√© avec Trivy
        run: |
          apk add --no-cache curl
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
          trivy image ${{ FORGE_REPOSITORY }} --severity HIGH,CRITICAL --exit-code 0

  deploy:
    name: üöÄ D√©ploiement en production
    needs: build-and-push
    runs-on: docker
    container:
      image: docker:latest
      options: --privileged --network=host
    steps:
      - name: üì¶ Installation des d√©pendances SSH
        run: |
          apk add --no-cache openssh-client bash

      - name: üîë Configuration SSH
        run: |
          mkdir -p ~/.ssh
          echo "StrictHostKeyChecking=no" > ~/.ssh/config
          echo "${{ secrets.PROD_SSH_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/config ~/.ssh/id_ed25519

      - name: üöÄ D√©ploiement en production
        env:
          SSH_USER: ${{ secrets.PROD_SSH_USERNAME }}
          SSH_HOST: ${{ secrets.PROD_SSH_HOST }}
          SSH_PORT: ${{ secrets.PROD_SSH_PORT }}
          PROJECT_DIR: ${{ secrets.PROJECT_DIRECTORY }}
          REGISTRY_USER: ${{ secrets.REGISTRY_USERNAME }}
          REGISTRY_PASS: ${{ secrets.REGISTRY_PASSWORD }}
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_ed25519 -p $SSH_PORT $SSH_USER@$SSH_HOST "
            set -ex
            
            # Aller dans le r√©pertoire du projet
            cd $PROJECT_DIR
            
            # Login au registre
            echo \"$REGISTRY_PASS\" | docker login ${{ FORGE_DOMAIN }} -u \"$REGISTRY_USER\" --password-stdin
            
            # Exporter le tag sp√©cifique pour le d√©ploiement
            export TAG=${{ github.sha }}
            export ENVIRONMENT=production
            
            # Mise √† jour des conteneurs
            docker compose pull
            docker compose up -d --remove-orphans
            
            # Nettoyage
            docker logout ${{ FORGE_DOMAIN }}
            docker system prune -f --filter \"until=24h\"
            
            echo 'D√©ploiement termin√© avec succ√®s'
          "

      - name: üì¢ Notification de d√©ploiement
        if: success()
        run: |
          echo "D√©ploiement r√©ussi en production"
        # Ici vous pourriez ajouter une notification Slack, Discord, etc.