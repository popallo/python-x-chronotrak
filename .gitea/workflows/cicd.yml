name: CI/CD ChronoTrak

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: docker
    container:
      image: docker:latest
      network: "host"
      options: --privileged
    steps:
      - name: Configuration du runner
        run: |
          apk add --no-cache git nodejs npm curl

      - name: Checkout du code avec actions/checkout
        uses: actions/checkout@v3
        with:
          repository: ${{ github.repository }}
          ref: ${{ github.sha }}

      # Authentification au registre
      - name: Login au registre Docker
        run: |
          echo "${{ secrets.REGISTRY_PASSWORD }}" | docker login forge.apacher.eu -u "${{ secrets.REGISTRY_USERNAME }}" --password-stdin

      # Construction et push de l'image
      - name: Build et push de l'image Docker
        run: |
          docker buildx build --provenance=false --push --tag forge.apacher.eu/aurelien-dazy/chronotrak:latest .

      # Analyse de sécurité avec Trivy
      - name: Installation et exécution de Trivy
        run: |
          apk add --no-cache curl
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
          trivy image forge.apacher.eu/aurelien-dazy/chronotrak:latest --severity HIGH,CRITICAL

  deploy:
    needs: build-and-push
    runs-on: docker
    container:
      image: docker:latest
      network: "host"
      options: --privileged
    steps:
      # Installation des dépendances SSH
      - name: Installation des dépendances SSH
        run: |
          apk add --no-cache openssh-client bash

      # Configuration de la clé SSH (ed25519)
      - name: Configuration de la clé SSH (avec débogage)
        run: |
          set -x  # Active le mode verbeux
          mkdir -p ~/.ssh || echo "Échec mkdir"
          echo "Répertoire créé, vérification:"
          ls -la ~ || echo "Échec ls"
          
          # Écrit la clé en protégeant les sauts de ligne
          echo "${{ secrets.PROD_SSH_KEY }}" | sed 's/\\n/\n/g' > ~/.ssh/id_ed25519 || echo "Échec écriture clé"
          
          echo "Clé écrite, vérification du fichier:"
          ls -la ~/.ssh || echo "Échec ls .ssh"
          
          # Correction des permissions
          chmod 600 ~/.ssh/id_ed25519 || echo "Échec chmod"
          
          # Vérification du format
          file ~/.ssh/id_ed25519 || echo "Fichier non trouvé"
          
          # Ajout de l'hôte connu
          ssh-keyscan -t ed25519 -H ${{ secrets.PROD_SSH_HOST }} >> ~/.ssh/known_hosts || echo "Échec keyscan"
          
          echo "Contenu du known_hosts:"
          cat ~/.ssh/known_hosts || echo "Fichier non trouvé"

      # Test de connexion SSH
      - name: Test de connexion SSH
        run: |
          ssh -i ~/.ssh/id_ed25519 -p ${{ secrets.PROD_SSH_PORT }} ${{ secrets.PROD_SSH_USERNAME }}@${{ secrets.PROD_SSH_HOST }} "echo 'Connexion SSH réussie'"

      # Déploiement sur le serveur de production
      - name: Déploiement sur le serveur de production
        run: |
          ssh -i ~/.ssh/id_ed25519 -p ${{ secrets.PROD_SSH_PORT }} ${{ secrets.PROD_SSH_USERNAME }}@${{ secrets.PROD_SSH_HOST }} "
            set -e
            cd ${{ secrets.PROJECT_DIRECTORY }}
            docker login forge.apacher.eu -u ${{ secrets.REGISTRY_USERNAME }} -p ${{ secrets.REGISTRY_PASSWORD }}
            ENVIRONMENT=production docker compose pull
            ENVIRONMENT=production docker compose up -d
            docker logout forge.apacher.eu
          "