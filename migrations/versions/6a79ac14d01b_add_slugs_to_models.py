"""add_slugs_to_models

Revision ID: 6a79ac14d01b
Revises: 2f662311be73
Create Date: 2025-05-13 20:29:33.719681

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.orm import Session
from sqlalchemy import text
from unidecode import unidecode
import re

# revision identifiers, used by Alembic.
revision = '6a79ac14d01b'
down_revision = '2f662311be73'
branch_labels = None
depends_on = None

def generate_slug(text):
    """Génère un slug à partir d'un texte"""
    # Convertir en minuscules et remplacer les caractères accentués
    slug = unidecode(text.lower())
    
    # Remplacer les espaces et caractères spéciaux par des tirets
    slug = re.sub(r'[^a-z0-9]+', '-', slug)
    
    # Supprimer les tirets au début et à la fin
    return slug.strip('-')

def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('client', schema=None) as batch_op:
        batch_op.add_column(sa.Column('slug', sa.String(length=100), nullable=True))
        batch_op.create_unique_constraint('uq_client_slug', ['slug'])

    with op.batch_alter_table('project', schema=None) as batch_op:
        batch_op.add_column(sa.Column('slug', sa.String(length=100), nullable=True))
        batch_op.create_unique_constraint('uq_project_slug', ['slug'])

    with op.batch_alter_table('task', schema=None) as batch_op:
        batch_op.add_column(sa.Column('slug', sa.String(length=100), nullable=True))
        batch_op.create_unique_constraint('uq_task_slug', ['slug'])

    # ### end Alembic commands ###

    # Générer les slugs pour les données existantes
    connection = op.get_bind()
    session = Session(bind=connection)

    # Mettre à jour les clients
    clients = session.execute(text('SELECT id, name FROM client')).fetchall()
    for client_id, name in clients:
        base_slug = generate_slug(name)
        slug = base_slug
        counter = 1
        while session.execute(text("SELECT COUNT(*) FROM client WHERE slug = :slug"), {'slug': slug}).scalar() > 0:
            slug = f"{base_slug}-{counter}"
            counter += 1
        session.execute(text("UPDATE client SET slug = :slug WHERE id = :id"), {'slug': slug, 'id': client_id})

    # Mettre à jour les projets
    projects = session.execute(text('SELECT id, name FROM project')).fetchall()
    for project_id, name in projects:
        base_slug = generate_slug(name)
        slug = base_slug
        counter = 1
        while session.execute(text("SELECT COUNT(*) FROM project WHERE slug = :slug"), {'slug': slug}).scalar() > 0:
            slug = f"{base_slug}-{counter}"
            counter += 1
        session.execute(text("UPDATE project SET slug = :slug WHERE id = :id"), {'slug': slug, 'id': project_id})

    # Mettre à jour les tâches
    tasks = session.execute(text('SELECT id, title FROM task')).fetchall()
    for task_id, title in tasks:
        base_slug = generate_slug(title)
        slug = base_slug
        counter = 1
        while session.execute(text("SELECT COUNT(*) FROM task WHERE slug = :slug"), {'slug': slug}).scalar() > 0:
            slug = f"{base_slug}-{counter}"
            counter += 1
        session.execute(text("UPDATE task SET slug = :slug WHERE id = :id"), {'slug': slug, 'id': task_id})

    # Rendre les colonnes non-nullables après avoir généré les slugs
    with op.batch_alter_table('client', schema=None) as batch_op:
        batch_op.alter_column('slug', nullable=False)

    with op.batch_alter_table('project', schema=None) as batch_op:
        batch_op.alter_column('slug', nullable=False)

    with op.batch_alter_table('task', schema=None) as batch_op:
        batch_op.alter_column('slug', nullable=False)

    session.commit()

def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('task', schema=None) as batch_op:
        batch_op.drop_constraint('uq_task_slug', type_='unique')
        batch_op.drop_column('slug')

    with op.batch_alter_table('project', schema=None) as batch_op:
        batch_op.drop_constraint('uq_project_slug', type_='unique')
        batch_op.drop_column('slug')

    with op.batch_alter_table('client', schema=None) as batch_op:
        batch_op.drop_constraint('uq_client_slug', type_='unique')
        batch_op.drop_column('slug')

    # ### end Alembic commands ###
